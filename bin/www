#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require('fs');
const app = require('../app');
const debug = require('debug')('find-me-tea-api:server');
const http = require('http');
const https = require('https');

/**
 * Get ports from environment and store in Express.
 */

const HTTP_PORT = normalizePort(process.env.PORT || '3000');
const HTTPS_PORT = normalizePort(process.env.HTTPS_PORT || '3443');
app.set('port', HTTPS_PORT);

/**
 * Load SSL certificates.
 */
const options = {
  key: fs.readFileSync('./server.key'),
  cert: fs.readFileSync('./server.cert') 
};

/**
 * Create HTTPS server.
 */
const httpsServer = https.createServer(options, app);

/**
 * Create HTTP server to redirect to HTTPS
 */

const httpServer = http.createServer((req, res) => {
  res.writeHead(301, { Location: `https://localhost:3443/${req.url}`});
  res.end();
});

/**
 * Listen on provided ports, on all network interfaces.
 */

httpServer.listen(HTTP_PORT, () => {
  console.log(`Redirecting HTTP to HTTPS on port ${HTTP_PORT}`);
});
httpsServer.listen(HTTPS_PORT, () => {
  console.log(`HTTPS server running on port ${HTTPS_PORT}`);
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof HTTPS_PORT === 'string' ? 'Pipe ' + HTTPS_PORT : 'Port ' + HTTPS_PORT;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  const addr = httpsServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
